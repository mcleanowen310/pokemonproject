<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>View trading cards</title>
    <link
      rel="stylesheet"
      href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css"
    />
    <link rel="stylesheet" type="text/css" href="/viewcards.css" />
  </head>
  <body>
    <%- include('navbar') %>

    <div class="container mt-4">
      <div class="row">
        <div class="col-md-6">
          <h2><%= titletext %></h2>
        </div>
        <div class="col-md-6 text-right">
          <a href="/viewsets" class="btn btn-primary">Back to sets</a>
        </div>
      </div>

      <div class="row mt-4">
        <div class="col-md-6">
          <h3>Selected Pok√©mon</h3>
        </div>
        <div class="col-md-6">
          <!-- Sort dropdown -->
          <div class="input-group">
            <select id="sort-select" class="custom-select">
              <option value="alphabetical">Alphabetical</option>
              <option value="hitpoints-asc">Hitpoints (Low to High)</option>
              <option value="hitpoints-desc">Hitpoints (High to Low)</option>
              <option value="illustrator">Illustrator</option>
            </select>
            <input
              type="text"
              id="search"
              class="form-control"
              placeholder="Search..."
            />
          </div>
        </div>
      </div>

      <div class="row mt-4" id="pokemon-list">
        <% pokedata['data'].forEach( (pokemon, index)=>{ %>
        <div class="col-md-3 card-div">
          <div
            class="card mt-4 pokemon-card"
            data-name="<%= pokemon.name.toLowerCase() %>"
            data-hitpoints="<%= pokemon.hitpoints %>"
            data-illustrator="<%= pokemon.illustrator %>"
          >
            <h5 class="card-title"><%= pokemon.name %></h5>
            <img
              src="<%= pokemon.img %>"
              alt="<%= pokemon.name %>"
              class="card-img-top"
            />
            <div class="card-body">
              <a
                href="/singlecard?item=<%= pokemon.card_id %>"
                class="btn btn-primary view-details-button"
              >
                View details
              </a>
            </div>
          </div>
        </div>
        <% }); %>
      </div>
    </div>

    <script>
      // Keep a reference to all cards
      var allPokemonCards = Array.from(
        document.querySelectorAll(".pokemon-card")
      );

      // Event listener for search input
      document.getElementById("search").addEventListener("input", function (e) {
        var searchQuery = e.target.value.toLowerCase();
        var pokemonList = document.getElementById("pokemon-list");
        var sortOption = document.getElementById("sort-select").value;

        // Clear the list currently being displayed
        pokemonList.innerHTML = "";

        // Filter the cards based on the search query
        var filteredCards = allPokemonCards.filter(function (card) {
          var pokemonName = card.getAttribute("data-name");
          return pokemonName.startsWith(searchQuery);
        });

        // Sort the filtered cards based on the current sort option
        if (sortOption === "alphabetical") {
          filteredCards.sort(function (a, b) {
            var nameA = a.getAttribute("data-name");
            var nameB = b.getAttribute("data-name");
            return nameA.localeCompare(nameB);
          });
        } else if (sortOption === "hitpoints-asc") {
          filteredCards.sort(function (a, b) {
            var hpA = parseInt(a.getAttribute("data-hitpoints"), 10);
            var hpB = parseInt(b.getAttribute("data-hitpoints"), 10);
            return hpA - hpB;
          });
        } else if (sortOption === "hitpoints-desc") {
          filteredCards.sort(function (a, b) {
            var hpA = parseInt(a.getAttribute("data-hitpoints"), 10);
            var hpB = parseInt(b.getAttribute("data-hitpoints"), 10);
            return hpB - hpA;
          });
        } else if (sortOption === "illustrator") {
          filteredCards.sort(function (a, b) {
            var illustratorA = a.getAttribute("data-illustrator");
            var illustratorB = b.getAttribute("data-illustrator");
            return illustratorA.localeCompare(illustratorB);
          });

          // Add cards with a heading for each illustrator
          var currentIllustrator = "";
          var illustratorDiv = null;
          filteredCards.forEach(function (card) {
            var illustrator = card.getAttribute("data-illustrator");
            if (illustrator !== currentIllustrator) {
              // Create a new div for the new illustrator
              illustratorDiv = document.createElement("div");
              illustratorDiv.className = "illustrator-div";

              // Add a new heading
              var heading = document.createElement("h3");
              heading.textContent = "Illustrated by: " + illustrator;
              heading.className = "illustrator-heading";
              illustratorDiv.appendChild(heading);

              // Append the new div to the pokemon list
              pokemonList.appendChild(illustratorDiv);

              currentIllustrator = illustrator;
            }

            // Append the card to the current illustrator div
            illustratorDiv.appendChild(card.cloneNode(true));
          });

          // Return to avoid re-rendering below
          return;
        }

        // Display the sorted and filtered cards
        filteredCards.forEach(function (card) {
          pokemonList.appendChild(card.cloneNode(true));
        });
      });

      // Event listener for sort dropdown
      document
        .getElementById("sort-select")
        .addEventListener("change", function (e) {
          // Trigger the search input event to refresh the list
          document.getElementById("search").dispatchEvent(new Event("input"));
        });

      function logout() {
        fetch("/logout", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
        })
          .then((response) => response.json())
          .then((data) => {
            if (data.success) {
              location.reload();
            } else {
              alert("Logout failed");
            }
          })
          .catch((error) => {
            console.error("Error:", error);
          });
      }
    </script>
  </body>
</html>
